from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from dotenv import load_dotenv
import os
import re
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_CHATS = list(map(int, os.getenv("ALLOWED_CHATS").split(',')))
ADMINS = list(map(int, os.getenv("ADMINS").split(',')))
CHAT_ADMIN_MAP = dict(zip(ALLOWED_CHATS, ADMINS))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()

spam_patterns = [
    r"(?:—Å—Ä–æ—á–Ω–æ|—Ö–∞–ª—Ç—É—Ä–∞|–ø–ª–∞—Ç–∏–º|—Å—Ä–∞–∑—É –Ω–∞ —Ä—É–∫–∏|–¥–µ–ø–æ–∑–∏—Ç|–∫–∞–∑–∏–Ω–æ|–ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫|—É–¥–∞–ª—ë–Ω–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å|–≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫|–¥–æ—Å—Ç–æ–π–Ω—ã–π –¥–æ—Ö–æ–¥)",
    r"\d+\s?(—Ç—ã—Å—è—á|–∫|—Ä|—Ä—É–±)",
    r"[Cc–°—Å][Pp–†—Ä][Oo–û–æ0][–ß—á][Hn–ù–Ω]"
]

logging_enabled = True

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∞–º–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω—É —á–∞—Ç–∞
async def log_spam(chat_id, user, message):
    if logging_enabled and chat_id in CHAT_ADMIN_MAP:
        admin_id = CHAT_ADMIN_MAP[chat_id]
        log_text = f"{datetime.now()} - {user}: {message}"
        try:
            await application.bot.send_message(admin_id, f"‚ö†Ô∏è –°–ü–ê–ú: {log_text}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
async def is_new_member(chat_id, user_id):
    member = await application.bot.get_chat_member(chat_id, user_id)
    if member.status in ['member', 'restricted'] and member.joined_date:
        if datetime.now() - member.joined_date < timedelta(hours=48):
            return True
    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º–∞
async def is_spam(update: Update):
    message = update.message
    if message.chat.id in ALLOWED_CHATS and await is_new_member(message.chat.id, message.from_user.id):
        for pattern in spam_patterns:
            if re.search(pattern, message.text, re.IGNORECASE):
                await log_spam(message.chat.id, message.from_user.full_name, message.text)
                return True
    return False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Å–ø–∞–º–æ–º
async def delete_and_ban(update: Update, context: CallbackContext):
    if await is_spam(update):
        message = update.message
        reply_message = await update.message.reply_text("üêï!")
        await asyncio.sleep(3)
        await message.delete()
        await application.bot.ban_chat_member(message.chat.id, message.from_user.id)
        await reply_message.delete()

# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞)
async def toggle_logs(update: Update, context: CallbackContext):
    global logging_enabled
    if update.message.from_user.id in ADMINS:
        logging_enabled = not logging_enabled
        await update.message.reply_text(f"–õ–æ–≥–∏ {'–≤–∫–ª—é—á–µ–Ω—ã' if logging_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def forward_info(update: Update, context: CallbackContext):
    if update.message.forward_from_chat:
        user_id = update.message.from_user.id
        chat_id = update.message.forward_from_chat.id
        await update.message.reply_text(f"ID —á–∞—Ç–∞: {chat_id}\n–í–∞—à ID: {user_id}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
async def test_delete_and_ban(update: Update, context: CallbackContext):
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if update.message.chat.id in ALLOWED_CHATS:
        message = update.message
        await message.delete()
        await log_spam(message.chat.id, message.from_user.full_name, message.text)
        reply_message = await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏ –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        await asyncio.sleep(3)
        await reply_message.delete()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
async def get_id(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    chat_id = update.message.chat.id
    await update.message.reply_text(f"ID —á–∞—Ç–∞: {chat_id}\n–í–∞—à ID: {user_id}")
    await update.message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_message(update: Update, context: CallbackContext):
    await update.message.reply_text("–ì–æ—Ç–æ–≤ –∑–∞–Ω—è—Ç—å—Å—è —É–±–æ—Ä–∫–æ–π!(v1)")
    await update.message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
application.add_handler(CommandHandler("start", start_message))
application.add_handler(CommandHandler("toggle_logs", toggle_logs))
application.add_handler(CommandHandler("test_delete_and_ban", test_delete_and_ban))  # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
application.add_handler(CommandHandler("getid", get_id))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, delete_and_ban))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
application.add_handler(MessageHandler(filters.FORWARDED, forward_info))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

if __name__ == "__main__":
    application.run_polling()
